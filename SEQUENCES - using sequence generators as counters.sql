/*

!!GENERATING & USING SEQUENCES - USING SEQUENCE GENERATORS AS COUNTERS!!

> You’re interested only in counting events, so there’s no point in creating a table row for
each sequence value

> Use a sequence-generation mechanism that uses a single row per counter

*/

/*
EXAMPLE FOR APPS:
> web page or banner ad hit counters, a count of items sold, or the number of votes in a
poll
	>> Such applications need only a single row to hold the count as it changes over time
*/

/*
> To count a single type of event, use a trivial table with a single row and column
	1) npr. to record copies sold of a book, create a table like this
	
> However, if you’re counting sales for multiple book titles, that method doesn’t work well
	>> Instead, count them all within a single table by including a column that uniquely 
	identifies each book
	2.1) The following table does this using a title column for the book title in addition
	to a copies column that records the number of copies sold
*/
1)
CREATE TABLE booksales (copies INT UNSIGNED);

2.1)
CREATE TABLE booksales
(
title VARCHAR(60) NOT NULL, # book title
copies INT UNSIGNED NOT NULL, # number of copies sold
PRIMARY KEY (title)
);

/*
> To record sales for a given book, different approaches are possible
1.1) Initialize a row for the book with a copies value of 0:
1.2) Then increment the copies value for each sale
> This method requires that you remember to initialize a row for each book or the
UPDATE will fail

2.1) Use INSERT with ON DUPLICATE KEY UPDATE, which initializes the row with a count
of 1 for the first sale and increments the count for subsequent sales
> This is simpler because the same statement works to initialize and update the sales
count
2.2) To retrieve the sales count issue a SELECT query for the same book title
	2.3) BUT DO THIS - modify the count-incrementing statement slightly
	2.4) The statement uses the LAST_INSERT_ID(expr) construct both to initialize and 
	to increment the count
*/
1.1)
INSERT INTO booksales (title,copies) VALUES('The Greater Trumps',0);
1.2) 
UPDATE booksales SET copies = copies+1 WHERE title = 'The Greater Trumps';

2.1)
INSERT INTO booksales (title,copies)
VALUES('The Greater Trumps',1)
ON DUPLICATE KEY UPDATE copies = copies+1;
2.2)
SELECT copies FROM booksales WHERE title = 'The Greater Trumps';
	2.3)	INSERT INTO booksales (title,copies)
			VALUES('The Greater Trumps',LAST_INSERT_ID(1))
			ON DUPLICATE KEY UPDATE copies = LAST_INSERT_ID(copies+1);
	2.4) SELECT LAST_INSERT_ID();

	
/*
> Use of LAST_INSERT_ID(expr) for sequence generation has certain other properties that
differ from true AUTO_INCREMENT sequences

	• AUTO_INCREMENT values increment by one each time, whereas values generated by
	LAST_INSERT_ID(expr) can be any nonnegative value you want.
		1) If you sell a dozen copies of a book rather than a single copy, update its 
		sales count as follows
	
	• To reset a counter, simply set it to the desired value.
		2) To clear the counters to zero at the beginning of each month
		
	• One property that’s not so desirable is that the value generated by LAST_INSERT_ID(expr) 
	is not uniformly available via client-side retrieval methods under all circumstances.
		>> You can get it after UPDATE or INSERT statements, but not for SET statements
		> Use PHP API (look it up)
*/
1)
INSERT INTO booksales (title,copies)
VALUES('The Greater Trumps',LAST_INSERT_ID(12))
ON DUPLICATE KEY UPDATE copies = LAST_INSERT_ID(copies+12);

2)
UPDATE booksales SET copies = 0;
